JavaScript:
============
1. Text editor - Visual Studio Code
2. NodeJs must be installed
3. GitHub account

https://github.com/Aakashdeveloper/june_javascript_mrng_21
akashhanda github

### Extensions to be installed in your Visual Studio Code:
-----------------------------------------------------------
> Auto close
> Es Lint
> Git History
> Git Lens
> Tab Nine

### which version of JavaScript you using ?
ES - Ecma Script
Ecma Script is the way to tell that, which version of JavaScript you using.

JavaScript dont have any version.
Ecma Script is the standard way of writing JavaScript.
Es5
Es6
Es7

we can have half code in Es5, half code in Es6..this is just standard way of writing JavaScript.
In Each version -- something new added.. something old is removed.

>>> DataType:
--------------
What kind of data it supports..
3 major datatypes:
1. String
2. Number
3. Boolen

two more datatypes:
4. null
5. undefined

String:
-------
Any number..
Any combination of string + number..
Any boolen..
Anything that comes in the quote is a string( single quote or double quote or backtick)
Everything is string..
> "Hii" 'hey' 'hello' '35345' 'df34' 'true' "false" `JavaScript`

Number:
--------
Any Numeric value..whether a single number, double digit or decimal ..is a Number.
There is nothing float or double..
> 35 4 33464645 4534.4634 .4643

Boolen:
--------
Either true or false.. is a boolean
> true false

////////////////
Declare variable in Es5
using keyword == var

var a = 10 
var b = "Hi"
var c = true

### How to know what what type of datatype is ?
typeof(a)

typeof(a)
"number"
typeof(b)
"string"
typeof(c)
"boolean"

var d = "11"
typeof(d)
"string"

var e = 'Hello'
typeof(e)
"string"

var f = 10.11
typeof(f)
"number"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var a = 10
undefined

var b = 20
undefined

a+b (addition)
30

b-a  ( subtraction )
10

b-a
10

a-b
-10

a*b  (multiplication)
200

a/b  (division)
0.5

a%b  ( modules ) 
10

4%4  reminder is 0
0

4%2
0

>>> Imp Intv Qn
logic: modules of smaller to larger is always smaller.
2%4
2

3%4
3

4%4
0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

///////////
var a = "Hi"
var b = "JavaScript"

a+b (concat)
"HiJavaScript"

a-b
NaN (not a number)

a*b
NaN

a/b
NaN

>>> logic: + operator - When we use with number its addition.
					  - When we use with String its concat.. It will give one value..
					  - If you use any other operator with String it will give you NaN..

>> If we mix what happens:
var a = "hi"
var b = 10
a+b
"hi10"

b+a 
"10hi"

a-b
NaN

>>> 
string+string = string
string+number = string
number+string = string
number+number = number

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>> Imp Intv Qn
10+"20"+30
	 "1020"+30  ( start from left to right)
  > "102030"

10+20+"30"
	30+"30"
  > "3030"

"10"+20+30
	"1020"+30
  >	"102030"

>>> Imp Intv Qn
here Logic: If both the side of the operator, If its a pure numeric value then except + is Concat, 
			every single/All operator will work as MATH (-, *, /, % )			
		>> If both side pure Number except + every operator will work..
10+"20"+30-1
	"102030"-1 
  >102029   

10+20+"30"-1
	"3030"-1
  > 3029

"10"+20+30-1
	"102030"-1
  > 102029

"10"+1
"101"

"10"-1
9

10-"1"
9

"10"*"2"
20

"10"/'2'
5

10/'2'
5

'10'/2
5

But In case if its having any string there.. its a NaN.
If any side its having a any charcater it is a NaN.
+ will still concat.
"10a"-1
NaN

10-'a1'
NaN

10-'1a'
NaN (not a number)

>>> Imp Intv Qn:
20-"1"+"10"-1 =1909
	19+"10"
	"1910"-1 
	1909

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Boolean:
--------
var a = true
var b = true
var c = false

true is equal to 1
false is equal to 0 

a+b
2

a+c 
1

10+true
11

10/false
Infinity

10-true
9

"hi"-true
NaN    //here string is culprit

"hi"+true
"hitrue" //concat

"10"-true
9  // here its pure numeric in double quote..

"10a"-true
NaN      //any character it becomes NaN

"10a"+true
"10atrue" 

>> Anything that combine with the String will Conact or give you NaN..

"true"+"true"
"truetrue"  

"true"-"true"
NaN    // In case of - will give you NaN..

"10"-"2"
8

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

////////////////
var a = "10"
var b = "2"
a+b
"102

var a = "10"
var b = "2"
undefined
a+b
"102"  // Here I want 12 instead of "102"

parseInt(a)  //convert that into a pure number.. It will take only number.
10

var c = "hii"
parseInt(c)
NaN

parseInt(a)+parseInt(b)
12

>> Example:
var a= "10.11"
var b = "20.14"

parseInt(a)+parseInt(b)
30   //here It will take only number.

parseFloat(a)+parseFloat(b)
30.25

var c = "11"
parseFloat(a)+parseFloat(b)+parseFloat(c)
41.25

>> parseInt -- If you want value without decimal.. pure interger.. then go for parseInt
>> parseFloat()  -- If you looking integer with decimal you go for parseFloat
>> Number() -- works like a parseFloat.. better synatx.. Es6 version..

Number(a)+Number(b)
30.25

Number(a)+Number(b)+Number(c)
41.25

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//Example:
var a = "10.11"
var b = "20.33"
a+b
"10.1120.33"

parseInt("10.1120.33")
10

parseFloat("10.1120.33")
10.112

var b = "20.5645467454"
parseFloat(b)
20.5645467454

var b = "10.1120.33"
parseFloat(b)
10.112

var b = "10.1125.33"
parseFloat(b)
10.1125

var b = "10.112544.88"
parseFloat(b)
10.112544

Number(b)
NaN

var a = NaN
typeof(a)
"number"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>> Imp Intv Qn:
var a = "Delhi10"
var b = "1011Delhi10"
var c = "10Delhi"

parseInt(a)
NaN  	// It is NaN ..
Logic: If the value starts with the String then It will give NaN always..
       If it is starting with the Number till the point it is getting the Number..as soon as it interacts with String 
	   it will stop there itself.. After String it will not care..
parseInt(b)
1011

parseInt(c)
10

//ES6 part.. for Number() everything is NaN.
Number(a)
NaN

Number(b)
NaN

Number(c)
NaN

parseFloat(a)
NaN

parseFloat(b)
1011

parseFloat(c)
10

>>>>>>>>>>>>>>>>
var a = "10.11"
var b = "20.33"
a+b
"10.1120.33"

parseInt("10.1120.33")
10

parseFloat("10.1120.33")
10.112

var b = "20.5645467454"
parseFloat(b)
20.5645467454

var b = "10.1120.33"
parseFloat(b)
10.112

var b = "10.1125.33"
parseFloat(b)
10.1125

var b = "10.112544.88"
parseFloat(b)
10.112544  //Upto 1 decimal it will take..

Number(b)
NaN

var a = NaN
typeof(a)
"number"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>> String Literals:  ( using backtick ``)
---------------------
var name = "Avenger"
var rating  = 4.5
var type = "action"
var ind = "Hollywood"

//Es5
var out = "An "+name+" is an "+type+" movie with rating of "+rating+" and from ind "+ind+"."
out
"An Avenger is an action movie with rating of 4.5 and from ind Hollywood."

//es6
var out = `An ${name} is an ${type} movie with rating of ${rating} and from ind ${ind}.`
"An Avenger is an action movie with rating of 4.5 and from ind Hollywood."

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Operators:
-----------
=    --> assignment

==   --> compare the data

===  --> compare the data and datatype 

var a = 10;
var b = 5;
var c = "10";

a == c  > compare the data 
true

a === c > compare the data and dataType
false

a == b 
false

a===b
false

>> If == is false then === is always false.

var d = 10
a == d
true

a === d
true

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var a = 10;
var b = 5;
undefined
a>b
true

a<b
false

a !==b 
true

a != b
true

a >= b 
true

a => b  //This represents function. dont write like this.
a => b

a <= b
false

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var a = 10;
var c = "10";

a != c  > compare the data   //here its ==
false

a !== c > compare the data and dataType  //here its ===  ...we dont use !=== c 
true

a == c
true

a===c
false

> All the compare operator will always return boolean output

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//negation (!): is also way of operator .. works like Opposite

var a = true
!a  //exclamatory of a is false..
false

var a = false
!a
true 

>>> Imp Intv Qn:
var a = 1 
!a
false  //It comes under boolean

var b = 0
!b
true  //It comes under boolean
Logic: true is equal to 1 ; false is equal to 0

>>>>>>>>>>>>>>
var a = 2 
!a
false
//Logic behind is: Basically in the JavaScript there are 2 kind of values - "truthy" and "falsy" values.
  truthy > any number except 0 weather +ve or -ve , string , true -- All are truthy value...Opposite of them is always false.
  falsy > 0 , false, null ,undefined   -- All are the falsy values.

var b = "hi"
!b
false

var c = -1
!c
false

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

isNaN(): (is not a number)
========
var a = 1
var b = "hiii"
var c = "1"
(is not a number)

>> Logic: isNaN will give true for string
		  false for number

isNaN(a) (is 1 is not a number) (no its  a number)
false

isNaN(b) (as "hii" is not a number)
true

isNaN(c)
false

//How it behaves for boolean
var  d= true 
isNaN(d)
false   // (is d is not a number ) (yes its  not a number) .. true is counted as 1. (is 1 is not a number) (no its  a number)

var a ="1a"
isNaN(a)
true   //it becomes string as 1 character came after 1.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//////////////
var a = "hii"
parseInt(a)
NaN

var b = NaN
typeof(b)
"number"  //type of NaN is number.

NaN = 0
0

NaN == 1
false

NaN == 0
false

NaN+1
NaN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

console.log() >>>>>> is used for checking output and debugging
alert() >>>>> is used for notification
prompt() >>> to take input from user 
confirm() >> to check weather yes or no 

alert("Form submitted")
alert("Slot is full")

>>>>>>>>>>>>>>
confirm("Do you want to leave")  //If i click "OK" it will give true
true

confirm("Do you want to leave")  //If i click "Cancel" it will give false
false

var out = confirm("Do you want to leave")
out
true

var out = confirm("Do you want to leave")
out
false

>>>>>>>>>>>>>>
prompt("What is your name")
"Aakash"

prompt("What is your age")
"10"

>> All the value it will come to you in the form of "String" to us.

var a = prompt("Enter first number");
var b = prompt("Enter second number");
alert(a+b)
"1011" //basically it concatenating ( string + string = Concat )

var a = prompt("Enter first number");"10.13"
var b = prompt("Enter second number");"20.65"
alert(Number(a)+Number(b))  //ParseInt() will not give better respose so better go for Number()
30.78

//If I write like this
var a = prompt("Enter first number"); "10.13"
var b = prompt("Enter second number"); "20.65"
alert(Number(a+b))
NaN  //Number will work for pure Number.

var a = prompt("Enter first number"); "10"
var b = prompt("Enter second number"); "20"
alert(parseFloat(a+b))
1020

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### String Operations:
-----------------------
var city = "LonDon";
undefined

city.toUpperCase()  //convert All the value into UpperCase
"LONDON"

city.toLowerCase()  //convert All the value into LowerCase
"london"

var city = "LonDon";
undefined

//I can read the each character of a String also
city[0]  //will get the first value/letter based on index ( 0 means first value )
"L"

city[1]  //1 means second value
"o"

city.length  //length is always total number of characters
6

city[5]
"n"

city[city.length-1]  //It will always give me the last character
"n"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
trim() -- remove all the spaces which are before or all the spaces which are after any character anything it finds..It cannot remove middle space ( "  Nikita .   " )

var name = "  Nikita   "   
undefined

name.length
11

name.trim()  // It will trim all the extra spaces.
"Nikita"

var out = name.trim()  //will store in a variable after trimming the extra spaces.
undefined

out.length
6

var name = "  Nikita .   "
undefined

name.trim()
"Nikita ."
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java Script is case sensitive.
 
var a= "john"  //this is in lower case
var b = "John"  //this is in upper case
a == b 
false


//user can enter either in lower case or upper case
var a= "john"
var b = "John"
a.toLowerCase() == b.toLowerCase() 
true

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
slice(): 
 - How many values you want to remove..
 - It will remove letter from the begining, whatever you type.
 - If we give range it will starts index.

charAt()
 - charAt() is taking Index number.

var city = "amSteRDam" (Amsterdam)

var city = "amSteRDam"
undefined

city.slice(1)  //It will remove 1 letter from the begining, whatever you type
"mSteRDam"

city.slice(2) //It will remove 2 letter from the begining
"SteRDam"

city.slice(3) //It will remove 3 letter from the begining
"teRDam"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
charAt(): we can use either slice() or charAt() it will give same output.
		
var city = "amSteRDam"
undefined

city.charAt(0)
"a"

city.charAt(1)
"m"

city[0]
"a"

>>> Imp Intv Qn >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//I want to convert first letter into uppercase and rest all into lowercase.
var city = "amSteRDam"
city.charAt(0).toUpperCase()  //converts only first letter into uppercase.
"A"

city.slice(1).toLowerCase()   //remove first letter and converts rest all into lowercase
"msterdam"  

city.charAt(0).toUpperCase()+city.slice(1).toLowerCase()  //combine together above 2 lines of code.
"Amsterdam"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var city = "amSteRDam"
// provide value between range..start index and end index
city.slice(2,5) //starting from 2nd till the 5 it will give that value.. it wil not consider 5th value..starts from 0,1
"Ste"

city.slice(2,6)  //starting from 2nd till the 6th it will give that value..
"SteR"

city.slice(1,3)
"mS"

// remove first 2 letter
city.slice(2)
"SteRDam"

// -ve - provide value from last
city.slice(-1)  //It will give last value
"m"

city.slice(-2)  //It will give last 2 values
"am"


// +ve and -ve ( remove from start and -ve remove for end)
city.slice(0,-1)  //give me without last value..It will remove no value from begining and remove 1 value from last.
"amSteRDa"

city.slice(0,-2)  //It will not give last 2 values...No value from the begining and 2 value from the last
"amSteRD"

city.slice(3,-3)  //It will remove 3 character from the begining and 3 character from the last.
"teR"

city.slice(1,-3) //It will remove 1 character from the begining and 3 character from the end.
"mSteR"

city.slice(0,-1)  //It will remove no character from begining and it will remove 1 character from the end.
"amSteRDa"

// -ve and +ve  no output
city.slice(-4,1)  //no output..If first value is negative and second is positive it will not give any output.. 
""

city.slice(-1,4)
""

//If first positive and second negative then it will remove that many character from the begining and that many character from the end.
city.slice(4,4)   
""
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var city = "amSteRDam"

// If first -ve is greater == no output..-1 is bigger than -4..
city.slice(-1,-4)  //If both negative 
""

// In this case If first -ve is small then range start from last
city.slice(-4, -1)
"RDa"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
city.slice(start,end) //slice() takes start and end
city.substr(start,length)  //substr() takes start and length

var city = "amSteRDam"

city.slice(2,5)  //it will give value between 2 to 5..starting from 2nd till 5..
"Ste"

city.substr(2,5)  //starting from 2nd till 5 character/letter it will give output.
"SteRD"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
includes():
indexOf(): 

var city = "amSteRDam"

city.includes('a') //we can check this character is present or not.include will tell you is that value is present or not.
true

city.indexOf('a')  //It will tell you first occurence ..indexOf() will tell you on which index number it is present.
0

city.indexOf('D')
6

city.indexOf('y')  //if that value is not part of character. indexOf() will give you -1
-1

city.includes('y') //if that value is not part of character. includes() will give false.
false

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
replace():

var a = "i am learning javascript"
undefined

a.replace('javascript','js') //it will replace the value
"i am learning js"

var a = "javascript i am learning javascript"
undefined

a.replace('javascript','js')   //It will replace the first occurrence by removing
"js i am learning javascript"

a.replace(/javascript/g,'js') //It want to replace all occurrence. /g is global
"js i am learning js"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
replace(): 

var name = "  Nikita .   "
undefined

name.replace(/ /g,'')  //replace all the spaces with nothing.
"Nikita."

name.replace(/ /g,'-')  //replace all the spaces with hephen.
"--Nikita-.---"

var name = "Nikita Verma"
undefined

name.replace(/ /g,'-') 
"Nikita-Verma"

var name = "NikitaVerma"  //separate the last name from here.. here we need to write a logic.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
split(): split each character got 0 index, first index ..etc

var url = "https://github.com/Aakashdeveloper/Create-node-app"
undefined

//here I want this name - Create-node-app

url.split('/')  //Each character got 0 index, 1st index, 2nd index etc..
(5) ["https:", "", "github.com", "Aakashdeveloper", "Create-node-app"]0: "https:"1: ""2: "github.com"3: "Aakashdeveloper"4: "Create-node-app"length: 5__proto__: Array(0)

url.split('/')[4]
"Create-node-app"

var a = url.split('/')[4]
undefined

var a = url.split('/')
undefined
a
(5) ["https:", "", "github.com", "Aakashdeveloper", "Create-node-app"]

a[a.length-1]  //whatever length is there I always get the last value
"Create-node-app"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var a = "javascript i am learning javascript"
undefined

a.split(' ') //split with space..common is spaces here
(5) ["javascript", "i", "am", "learning", "javascript"]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//to split each word separate

var a = "javascript";
undefined

a.split('')   //split with nothing.. to split each word separate..
(10) ["j", "a", "v", "a", "s", "c", "r", "i", "p", "t"]

//bring it back to normal string..
var a = ["j", "a", "v", "a", "s", "c", "r", "i", "p", "t"]
a.toString()

"j,a,v,a,s,c,r,i,p,t"

//convert number into string
var a = 10
undefined

a.toString()
"10"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var a = ["j", "a", "v", "a", "s", "c", "r", "i", "p", "t"]
a.toString()
"j,a,v,a,s,c,r,i,p,t"

var out = a.toString()
undefined

out.replace(/,/g,'')
"javascript"

a.toString().replace(/,/g,'')  //bring back to word.
"javascript"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Math Operations:
-----------------
## Math.random():
-----------------
- it gives me random number in decimal. By default its decimal number.

Math.random()   //it gives me random number in decimal. By default its decimal number.
0.5232745801915639

Math.random()*10  //multiple by 10 it give random number.. It gives the number range between 0.1 to 10
7.7335707784256265

Math.random()*100 //It gives the number between 0.1 to 100 ..
22.146850486365686

Math.random()*1000   //It gives the number between 0.1 to 1000 ..
706.6470727699996

Math.random()*10000 //It gives the number between 0.1 to 10000 ..
4234.639258295205

Math.random()*10000
467.5287235665149

## Math.floor(): 
---------------- 
- It always tend towards the lower side. It always give lower value.
- It gives me pure integer/number

Math.floor(10.1)
10

Math.floor(10.4)
10

Math.floor(10.9)
10

## Math.ceil():
---------------- 
- It always tend towards the upper side. It always give upper value.
- It gives me pure integer/number
- Both floor and ceil gives me pure integer/number.

Math.ceil(10.1)
11
Math.ceil(10.4)
11
Math.ceil(10.9)
11

Math.floor(467.5287235665149)  //it gives me integer value
467

Math.floor(Math.random()*10000)
906

Math.floor(Math.random()*10000)
4829

Math.floor(Math.random()*10000)
4793

## Math.round(): 
---------------- 
- If anythig less than 0.5 it tend towards lower side.
- 5 or above 0.5 it tend towards higher side.

Math.round(10.1)
10

Math.round(10.4)
10

Math.round(10.49999)
10

Math.round(10.5)
11

Math.round(10.9)
11

Math.round(.5)
1

Math.round(.499999999)
0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> Imp Intv Qn
## I want to generate random number in a given specific range

Math.floor(Math.random() * (max-min))+min  //this is formula logic

15-32  //I want generate random number in this given range

Math.floor(Math.random() * (32-15))+15
24

Math.floor(Math.random() * (32-15))+15
19

Math.floor(Math.random() * (17))+15  //
26

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>> TensorFlow.js is a library for machine learning in JavaScript.

Math.PI  //It give me value of PI
3.141592653589793

Math.PI.toFixed(2)   //I want upto 2 decimal.
"3.14"

Number(Math.PI.toFixed(2))
3.14

Math.PI.toFixed(3)  //I want upto 3 decimal.
"3.142"

Math.random().toFixed(4)  //I want upto 4 decimal.
"0.4975"

Math.floor(Math.PI)   //If I use floor() it gives me pure integer number.
3

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Math.E
2.718281828459045

Math.sin(1)
0.8414709848078965

Math.sin(0)
0

Math.sin(-1)
-0.8414709848078965

Math.cos(1)
0.5403023058681398

Math.cos(-1)
0.5403023058681398

Math.cos(0)
1

Math.log(1)
0

Math.log(0)
-Infinity

Math.log10(1)  //log base 10 of 1 is 0
0

Math.log10(10)
1

Math.pow(2,2)
4

Math.pow(2,3)  //2 isto power 3
8

Math.sqrt(4)
2

Math.sqrt(5)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### Storage:  ( Browser Storage )
-------------
every website saves some temporary data for the usage.
every website it will save data as temporary storage in browser and use at runtime.

When I login to appln, I will save my user data in my Browser -> Application tab -> Storage -> Session Storage.

3 types storage:
1. localstorage
2. Session Storage
3. Cookies

localstorage:
---------------
> is a persistant storage.
> it saves wrt to browser. even website close it still stays there
> we have to remove manually. 

localStorage.setItem('tokendata','87678bh8yweg87gfbe8')
undefined

localStorage.getItem('tokendata')
"87678bh8yweg87gfbe8"

localStorage.removeItem('tokendata')
undefined

localStorage.getItem('tokendata') //if you get after removing it will come null.
null

localStorage.setItem('tokendata','87678bh8yweg87gfbe8')
undefined

localStorage.removeItem('tokendata')
undefined

2. Session Storage:
-------------------
> is a temorary storage.
> It removes automatically..As soon as you logout the website I am removing data
> save wrt to tab. As soon as your tab is closed, it will ideally remove this data automatically.

sessionStorage.setItem('userType','Admin')
undefined

sessionStorage.getItem('userType')
"Admin"

sessionStorage.removeItem('userType')
undefined

sessionStorage.getItem('userType')
null

sessionStorage.setItem('userType','Admin')

3. Cookies:
-------------
> Cookies are saved wrt to Website
> Cookies has expireIn time

document.cookie
"_ga=GA1.2.1880173027.1602255983; _gid=GA1.2.507546962.1624346026; _gat_gtag_UA_131256843_1=1"

document.cookie="city=delhi; expires=Thur, 01 July 2021 01:00:00"  //this cookie is avilable till 01 July 2021
"city=delhi; expires=Thur, 01 July 2021 01:00:00"

document.cookie
"_ga=GA1.2.1880173027.1602255983; _gid=GA1.2.507546962.1624346026; city=delhi"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## var, let and const:
-----------------------
var > we can redeclare and reassign  ( same variable we can use again and change value )
let > we cannot redeclare but can reassign  ( where you want to change value use "let" )
const > we cannot redeclare nor reassign    ( where you dont want to change value use "const" )

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var a = 10;
	var a > declare  //first step is declaration
	a = 10 > assignment  //second step assignment

Node version above 10 - v14.15.5

> var a = 10   //here a becomes 10
> a
10

> var a = 11  //here a becomes 11
> a
11

> a = 12   //here a becomes 12
12
> a
12
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	
> let b = 20
undefined
> b
20

> let b = 21
Uncaught SyntaxError: Identifier 'b' has already been declared

> b = 21
21

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

> const c = 10
undefined
> c
10

> const c = 11
Uncaught SyntaxError: Identifier 'c' has already been declared

> c = 11
Uncaught TypeError: Assignment to constant variable.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### github:
-------------

https://git-scm.com/downloads

>>>>First Time from New folder<<<<<<<<<       
git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/testgit.git
git push -u origin master

////////////////////////////////
git status 

git add filename    
git commit -m "comment"
git push 

git pull 

git branch 

//New branch
git checkout -b branchname

//switch branch
git checkout branchname

//push to branch     
git push -u origin branchname

>> git fetch origin feature/test

>>> first time
git clone https://github.com/Aakashdeveloper/testgit

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## if else:
------------
if(condition){  //If condition is true/match
    //do something
} else{   //If condition is false
    // do something
}

var a = 8772
undefined

a%2==0  //division by 2..output of condition is always boolean
true

a%3==0  //division by 3..output of condition is always boolean
true

a%5==0  //division by 5..output of condition is always boolean
false

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var a = 54652
if(a%2==0){
    console.log(`Number ${a} is even`)
}else{
    console.log(`Number ${a} is odd`)
}
Number 54652 is even
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var a = 5465
if(a%2==0){
    console.log(`Number ${a} is even`)
}else{
    console.log(`Number ${a} is odd`)
}
Number 5465 is odd

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var name = "Priya";
if(name=="Priyanka"){  //If condition matches, it will go inside and stop
    console.log(`Hi ${name} you are admin`)
}else if(name=="Bhumika"){
    console.log(`Hi ${name} you are super admin`)
}else if(name=="Priya"){
    console.log(`Hi ${name} you are user`)
}else{  //If condition not matches
    console.log(`Hi ${name} you are unknown`)
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var name = "John"
var role = "User"

if(role == "Admin"){
    if(name == "Aakash") {
        console.log(`Hi ${name} your role is ${role}`)
    } else{
        console.log(`Hi ${name} your role is unknown`)
    }
} else if(role == "User") {
    if(name == "John") {
        console.log(`Hi ${name} your role is ${role}`)
    } else {
        console.log(`Hi ${name} your role is unknown`)
    }
} else {
    console.log(`Invalid Input`)
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// any condition can match - OR condition
var name = "Tina"
if(name == "Tina" || role=="Admin"){
    console.log(`Hi ${name} your role is ${role}`)
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// both match  -- AND condiiton
if(name == "Tina" && role=="Admin"){
    console.log(`Hi ${name} your role is ${role}`)
}

var name = "Tina"       //out of this any one
if(name == "Tina" && (role=="Admin" || role=="User")){
    console.log(`Hi ${name} your role is ${role}`)
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
truthy > any number except 0 weather +ve or -ve , or any string , or true -- All are truthy value...Opposite of them is always false.
falsy > 0 , false, null ,undefined   -- All are the falsy values.

var a = 1;   
if(a) {
    console.log("hii")
} else {
    console.log("bie")
}
hii    //1 is true first part runs.. its truthy value

var a = 0;
if(a) {
    console.log("hii")
} else {
    console.log("bie")
}
bie  //0 is true second part runs.. its falsy value

var a = -1;   //this is also truthy value.. -1 is true first part runs..
if(a) {
    console.log("hii")
} else {
    console.log("bie")
}
hii

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## Ternary opeartor > basically Single line  if else

//////////////////
condition ? if true : if false
If condition true - then first part works Else second part works.

var a = 10;
a>10 ? "hii" : "bie"
"bie"   //here condition is false so second part works

var a = 10;
a==10 ? "hii" : "bie"
"hii"  //here condition is true so first part works

var a = 10;
a>10 ? a+1 : a-1
9     //here condition is false

var a = 10;
a==10 ? a+1 : a-1
11   //here condition is true

// wrong code -- we never do nested ternary ////
var a = 10;
a==10 ? a+1 : a-1 ? "Hii" : "Bie"
11

var a = 10;
a>10 ? a+1 : a-1 ? "Hii" : "Bie"
"Hii"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## Date: By default JS gives the date ( current date and time )

Date()
"Fri Jul 02 2021 08:42:51 GMT+0530 (India Standard Time)"

var a = new Date()
undefined

a.getDate()
2

a.getMonth()
6

a.getFullYear()
2021

a.getDay()
5

> month start with 0 as Jan and 11 as dec 
> day start with 0 as sunday and 1 as monday, 2 as Tuesday, 3 as Wednesday, 4 as Thursday, 5 as Friday, 6 as Saturday

assignment## print - in single line name of the month

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## switch:
-----------
if we have multiple condition and multiple output ( better to go with if else )
one condition and one output ( go with ternary )
one condition and multiple output ( go with switch )

switch(condition){
    case output1:
        response
    case output2:
        response
    default:
        response
}

var name = 'Eva'
switch(name){  //here condition is one only i.e. name
    case 'Aakash':  //if output of that is 'Aakash' then
        console.log(`Hi ${name}`);
        break;  //if you dont put break every case will run.
    case 'Eva':
        console.log(`Hi ${name}`);
        break;
    default:
        console.log(`Hi Unknown`)
}
Hi Aakash

//I want to find a number is Odd or Even ?
var input = 2;
switch (input%2){  //condition is One
    case 0:  //If output is 0 then
        console.log(`Number ${input} is even`);
        break;
    case 1:   //If output of this case is 1 then
        console.log(`Number ${input} is odd`);
        break;
    default:  //Else default
        console.log(`Default Case`);
}


switch(new Date().getDay()){  //condition
    case 0:  //If output of this condition is 0 then
        console.log(`Today is sunday`)
        break;
    case 1:
        console.log(`Today is monday`)
        break;
    default:
        console.log(`Wrong Input`)
}
Today is monday

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## Array:
-----------
> Array is a collection of homogeneous datatype as well as heterogeneous..
		     homogeneous means collection of one kind of data
> Array is represented by [ ] square bracket

var a = [1,4,5,554,43,797,0,044] (array of number)
var b = ['sdbg','dsgdf','r3r3','ebfe3'] (array of string)
var c = [true,false,false,true] (array of boolean)

//heterogeneous array  -- contains some number, some string, some boolean...any order
//heterogeneous array - combination of number, string, boolean..
var d = [1,2,true,'cd',false,false,34,634,"esdgd","db",2]

var city = ["Delhi","Venice","Amsterdam","London"]
typeof(city)  //type of the array is Object
"object";

var a = NaN
type(a)  //type of NaN is number
"number"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//Index number starts from 0..

var city = ["Delhi","Venice","Amsterdam","London"]
undefined

city[1]
"Venice"

city[0]
"Delhi"

city.length   //length of array
4

city[city.length-1]   //if you wnat last value
"London"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
push> add the value in the end of the array
unshift> always remove first value of the array. add the value in begining of the array.
//push and  unshift are opposite

pop > remove always last value of the array. It also affects the original array.
shift> remove first value of the array.
//pop and  shift are opposite

## push:
---------
var city = ["Delhi","Venice","Amsterdam","London"]
undefined
city.push('Mumbai')
5
city
(5) ["Delhi", "Venice", "Amsterdam", "London", "Mumbai"] 0: "Delhi" 1: "Venice" 2: "Amsterdam" 3: "London"4: "Mumbai" 5: "Dubai"length: 6__proto__: Array(0)

city.push('Dubai')
6
city
(6) ["Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]

## pop:   
---------
//always remove last value of the array. whether you give index number or dont give index number parameter does not matter

city.pop()
city
(5) ["Delhi", "Venice", "Amsterdam", "London", "Mumbai"]

city.pop(2)    //
"Mumbai"
(4) ["Delhi", "Venice", "Amsterdam", "London"]

city.pop(100)
"London"
city
(3) ["Delhi", "Venice", "Amsterdam"]

## unshift:    //opposite to push...add the value in begining of the array.
-----------
var city = ["Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]
city.unshift('Nice')
7
city
(7) ["Nice", "Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]
city.shift()
"Nice"

## shift:    //opposite to pop
-----------
(7) ["Nice", "Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]
city.shift()
"Nice"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## slice():  It remove the first value of the array.. the main array does not affected.
-----------
var city = ["Nice", "Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]
undefined

city.slice(1)
(6) ["Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]

city.slice(2)
(5) ["Venice", "Amsterdam", "London", "Mumbai", "Dubai"]
city
(7) ["Nice", "Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## splice():
-------------
> It take 3 values - splice(startIndex, DeleteCount, values):
> Original array gets affected.

var city = ["Nice", "Delhi", "Venice", "Amsterdam", "London", "Mumbai", "Dubai"]
city.splice(startIndex, DeleteCount, values)   //DeleteCount - how many values you want to remove 

// on index 2 delete 2 values
city.splice(2,2)
(2) ["Venice", "Amsterdam"]

city
(5) ["Nice", "Delhi", "London", "Mumbai", "Dubai"]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// on index 1 dont delete value but add 2 values
city.splice(2,0,'Paris','Boston')

city
(7) ["Nice", "Delhi", "Paris", "Boston", "London", "Mumbai", "Dubai"]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// on index 3 delete one value and add 1 value;
city.splice(3,1,'Edinberg')
(7) ["Nice", "Delhi", "Paris", "Boston", "London", "Mumbai", "Dubai"]

city.splice(3,1,'Edinberg')
["Boston"]

city
(7) ["Nice", "Delhi", "Paris", "Edinberg", "London", "Mumbai", "Dubai"]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var a =['a',2,'c',1]
var b = [2,'d',4]

a+b
"a,2,c,12,d,4"   //first value of second array they place together

a-b
NaN

//using concat() it will work..
a.concat(b) 
["a", 2, "c", 1, 2, "d", 4]

var c = [4,'e',4,7]
a.concat(b,c)
(11) ["a", 2, "c", 1, 2, "d", 4, 4, "e", 4, 7]

c.concat(a,b)
(11) [4, "e", 4, 7, "a", 2, "c", 1, 2, "d", 4]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## indexOf():
-------------
> If the value is part of the array you will get index number either 0 or >0
> If that value is not part of the array, you will get always -1

var city = ["Nice", "Delhi", "Paris", "Edinberg", "London", "Mumbai", "Dubai"]
undefined

city.indexOf('Delhi')
1

city.indexOf('Hongkong')
-1

city.indexOf('Pune')
-1

city.indexOf('London')
4

city.indexOf('Nice')
0

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### I want to check given value is array or not
var a = "hii"
var b = ["Hii"]

Array.isArray(a)
false

Array.isArray(b)
true

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//we can sort the array..
var city = ["Nice", "Delhi", "Paris", "Edinberg", "London", "Mumbai", "Dubai"]
city.sort()
(7) ["Delhi", "Dubai", "Edinberg", "London", "Mumbai", "Nice", "Paris"]

//we can reverse the array..
city.reverse()
(7) ["Paris", "Nice", "Mumbai", "London", "Edinberg", "Dubai", "Delhi"]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> Imp Intv Qn:
Lets say we have random array

var random = ["Nice", 5, "delhi", false, "Paris", "edinberg", 2, 1, true, "London", "mumbai", 'zurich', "Dubai"]

//sort this array.. It sorted the array for me..how it sorted ?
random.sort()
[1, 2, 5, "Dubai", "London", "Nice", "Paris", "delhi", "edinberg", false, "mumbai", true, "zurich"]

It sorted the array in the form of..
[number, capital letter, small letter which includes boolean as well]
boolean also counted as small letter..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//Lets we have nested array..array inside the array..
var city = ["Nice", "Delhi", ['Red','Yellow','Green'], "London", ['Bmw','Audi','Merc',['React','Node','JavaScript'],'Skoda'], "Dubai"]

//If I want to print here Delhi
city[1]
"Delhi"

city[2]  // is the array
(3) ["Red", "Yellow", "Green"]

city[2][0]
"Red"

city[3]
"London"

city[4][2]
"Merc"

city[4][3]
(3) ["React", "Node", "JavaScript"]

city[4][3][0] //number of array means number of square brackets.
"React"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var city = ["Nice", "Delhi", ['Red','Yellow','Green'], "London", ['Bmw','Audi','Merc',['React','Node','JavaScript'],'Skoda'], "Dubai"]

//it removes the one level of nesting array..
city.flat()
["Nice", "Delhi", "Red", "Yellow", "Green", "London", "Bmw", "Audi", "Merc", Array(3), "Skoda", "Dubai"]

//removes the two level of nesting..we will have pure straight array..
city.flat(2)
["Nice", "Delhi", "Red", "Yellow", "Green", "London", "Bmw", "Audi", "Merc", "React", "Node", "JavaScript", "Skoda", "Dubai"]

//first flat and then sort it..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### Loops:
----------
for
for of
for in(object)
Map   //requires function
filter  //requires function
while    //no one will use
do while  //no one will use

////////////////////////////////////////////////////////////////
for loop > help to generate series of value or help to iterate over array
////////////////////////////////////////////////////////////////

for(startIndex,condition,increment) { }

for(i=0; i<5; i++) {
    console.log(i)
}
0
1
2
3
4

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var city = ["Nice", "Delhi", "Paris", "Edinberg", "London", "Mumbai", "Dubai"]
for (i=0; i<city.length; i++) {
    console.log(city[i])
}
Nice
Delhi
Paris
Edinberg
London
Mumbai
Dubai

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var city = ["Nice", "Delhi", ['Red','Yellow','Green'], "London", "Dubai"]
for(i=0;i<city.length;i++) {
    if(Array.isArray(city[i])) {
        for(j=0;j<city[i].length;j++) {
            console.log(city[i][j])
        }
    } else {
        console.log(city[i])
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
////////////////////////////////////
while
///////////////////////////////////
first we check the condition and then print and increment

var i = 10;
while(i<5) {
    console.log(i)
    i++
}

////////////////////////////////////
Do while
///////////////////////////////
first you print and then check the condition..
if you dont want to print atleast once..

var i = 10;
do {
    console.log(i)
    i++
}
while(i<5)

////////////////////////////////////
for of
///////////////////////////////////

var city = ["Nice", "Delhi", "Paris", "Edinberg", "London", "Mumbai", "Dubai"]

//to print all the values of array
for(mycity of city) {
    console.log(mycity)
}

var city = ["Nice", "Delhi", ['Red','Yellow','Green'], "London", "Dubai"]
for(mycity of city){
    
    if(Array.isArray(mycity)) { //if this is the array.. go inside then run loop
        for(color of mycity) {
            console.log(color)
        }
    } else {
        console.log(mycity)
    }   
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### categories of functions:
------------------------------
function
method
arrow function
iffi   //immediately invokable function
generator
//////////////////

function:
----------
var a = 10;
var b = 20;
a+b
30

> function is the keyword. 
> we can give any name to the function
> we give parameters to the function
> function will return

function add(a,b) {
    return a+b
}

//call the function
add(1,2)
3

add(10,20)
30

add('a','b')
"ab"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//write a function to find given number is even or odd

function isEven(userInput){
    var out;
    if(userInput%2==0){
        out = `Number ${userInput} is even`
    }else{
        out = `Number ${userInput} is odd`
    }
    return out
}

isEven(5)
"Number 5 is odd"

isEven(50)
"Number 50 is even"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
function test(a,b){
    return a,b
}

//you cannot return more than one value from the function.. whatever is the last written parameter that will be return.
//By deafult function do not return the two output at one go.
test(1,2)   
2    // here it will return b

function test(a,b){
    return b,a 
}

test(1,2)  // here it will return a
1


function test(a,b){
    var out = [a,b] //if u want to still return, then put them into array and then return..
    return out
}
test(1,2)
(2) [1, 2]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am not sure how many parameters user is going to send.. here comes by Es6 >>> Rest

//Es6 >>> Rest operator
// with rest we can take any number of parameters
// it return all parameters in from of array

function add(...args) {  //always 3 dots..
    console.log(args)
}

add(1,2,3,4,5,6)
[1, 2, 3, 4, 5, 6]   //it will return .. you get array of 6 numbers

add(1,2)
[1, 2]   //it will return .. you get array of 2 numbers


//whatever parameter user will pass, we receieve the array of that values.
add('hii','bie','Hey')
["hii", "bie", "Hey"]   


function add(...args){
    var sum = 0;
    for(data of args) {
        //sum = data+sum
        sum += data
    }
    return sum
}

add(1,2)
3

add(1,2.5,4,6,9)
22.5

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//////////
method > when function assign to variable it becomes a method.
/////////
function add(a,b) {
    return a+b
}
add(1,2)
3

-------Method--------
var add = function(a,b) {
    return a+b
}

add(1,2)
3

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
////////////////
Arrow Functions (es6)
////////////////

var add = (a,b) => {
    return a+b
}
add(1,2)

//function inside a function..
function returnFunctionData() {
    var userName = "John"

    function add(a,b){
        console.log(a+b)
    }
    function sub(a,b){
        console.log(a-b)
    }
    function multiply(a,b){
        console.log(a*b)
    }

	//finally we will return it.
    return {
        // add: add   //If both the side of the colon have same value it will work. this we call Destructue.
    Or  add,
        sub: sub,
        multiply: multiply,
        userName
    }
}

var mytest = returnFunctionData()
undefined

mytest.userName
"John"

mytest.add(1,2)
3

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## Destructue:  The concept of Destructuring says, that dont have to write both the value on both the side.
---------------
var [a,b] = [1,2]
a
1
b
2

var add = (a,b) => { return a+b} 
add(1,2)

add
add:add

const x = [1,2,3,4,5]
const [y,z] = x
y == 1
z == 2

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### IFFI:
---------
To run as .js whole file, nodejs must be installed..
> open the command prompt -> go inside the folder -> node 18function2.js   ( node <file_name>  )
> Open the terminal from Visual studio code --> node 18function2.js

/*function sayHi(){
    console.log("hiiii")
}
sayHi()*///////////  here explicitly we call the function..

// IFFI or callback function ... Immediately invokable function...something popup should run automatically..
//this function has no name.. it automatically get called.. we called call back functions.
( function() {
    console.log("hiiii") 
}())

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## Spread:
------------
function add(a,b,c,d){
    console.log("a>>>",a)
    console.log("b>>>",b)
    return a+b+c+d
}

var num = [1,2,3,4]

add(num)   //num will treat as one parameter..
"1,2,3,4undefinedundefinedundefined"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
function add(a,b,c,d){
    console.log("a>>>",a)
    console.log("b>>>",b)
    return a+b+c+d
}

var num = [1,2,3,4]

add(num)
a>>> (4) [1, 2, 3, 4]

b>>> undefined
"1,2,3,4undefinedundefinedundefined"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

function add(a,b,c,d){
    console.log("a>>>",a)
    console.log("b>>>",b)
    return a+b+c+d
}

var num = [1,2,3,4]
add(...num)     //here it passes the value one by one parameter

///// if we use ... for passing parameter than we call it as spread operator
				we calling the function and passing the parameter then its spread.
				
	  Ex: add(...spread)
	  
// if we use ... for defining the function that rest..
	Ex:
	function add(...rest){

	}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// here ...args act like rest
function add(...args) {
    var sum = 0;
    for(data of args){
        sum += data
    }
    return sum
}

var num = [1,2,3,4]
/// ...num act like spread
add(...num)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var b = [1,2,3,4]
var a = ['a','b','c','d']   //I want to put above array inside this array..

var a = ['a','b',...b,'c','d']
a
["a", "b", 1, 2, 3, 4, "c", "d"]

//If you want to update the original array and + you want to add more values into that..
var out1 = [1,2,3]
var out2 = [...out1,4,5,6]

out2
(6) [1, 2, 3, 4, 5, 6]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
/////generator////
function loop(userInput) {
    for(i=0; i<userInput; i++){
        console.log(i)
    }
}

loop(5)  //it has printed all values in one go.. 0,1, 2, 3, 4, 5
0
1
2
3
4

But in some cases you want to control the behvaior of it..to control the flow of the function/application..

//put * and put yeid
function * loop(userInput){
    for(i=0;i<userInput;i++){
        yield i
    }
}

loop(5)   //Initially if you call this function you will not get any output of it..
loop {<suspended>}

var data = loop(5)  //assign a data to variable.. and call next() method..

data.next()
{value: 0, done: false}

data.next()
{value: 1, done: false}

data.next()
{value: 2, done: false}

data.next()
{value: 3, done: false}

data.next()
{value: 4, done: false}

data.next()  //in the end value will become undefined and done becomes true..
{value: undefined, done: true}

It is used, when you have button.. when you click on button you want next value.. again click on button you want next value..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### Map: is kind of loop
---------
var a = [4,5,16,2,3,17,5,9,11,17,8,6,14,4,18,8]

a.map( () ==> {} )  //Inside map you write a function.. Its like call back function.. map is itself a function..
we calling one function inside the other function..This function does not have name inside it..
when the map() will run, this inside function () ==> {}  will be invoked automatically..

call back function -- mean we calling one function inside the other function

a.map((data) => { console.log(data)})  //just printing the data as its array..

//I want each number multiply by 2..
a.map( (data) => { return data*2} )     //It will give me the array of same length each number multiply by 2..
[8, 10, 32, 4, 6, 34, 10, 18, 22, 34, 16, 12, 28, 8, 36, 16]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//If I want each one of them in <p> tag.

a.map( (data) => { return `<p>${data*2}</p>`} )

["<p>8</p>", "<p>10</p>", "<p>32</p>", "<p>4</p>", "<p>6</p>", "<p>34</p>", "<p>10</p>", "<p>18</p>", "<p>22</p>", "<p>34</p>", "<p>16</p>", "<p>12</p>", "<p>28</p>", "<p>8</p>", "<p>36</p>", "<p>16</p>"]

> map & filter is use to iterate over the array .. only it works with array.
> it always return same length of output as input array
> it is use to apply logics(sum, multiply, divison) or return html..

In the React every where we use map..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### filter(): 
--------------
filter helps to filter the data..

var a = [4,5,16,2,3,17,5,9,11,17,8,6,14,4,18,8]

//I want all those numbers greater than 10..
a.filter( (data) => {return data>10} )
[16, 17, 11, 17, 14, 18]

> filter is use to filter out the value
> it may or may not return same length of output2
> it only return those value for which condition/output is true.. filter will give the value on the basis of output..
  it return only those values if the condition is true..

//If we use map() here.. It return the same length of the array..map return the output..
var a = [4,5,16,2,3,17,5,9,11,17,8,6,14,4,18,8]
a.map((data) => {return data>10})
[false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>Important Intv Qn:
var a = [0,1,2,3]
a.map( (data)=> { return data*2})
[0,2,4,6]

a.filter((data)=> { return data*2})
[1, 2, 3]  //output of this condition is [1,2,3]

//logic..it only return those value for which condition/output is true.. 
>0*2 =0 false
>1*2 =2 true
>2*2 =4 true
>2*3 =6 true

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
RegExp
### regularExpression:
-----------------------
^$  //use for validation purpose we use regularExpression.

// if pattern does not match it will return null
//If you get output as array then its pattern matched.

//I want to check whether given value is String or not..
var a = "hi"
a.match("^[a-z]$")  //expecting value should be a to z.. checking a to z only with the single letter..
null  //returns null..

var a = "hi"
// expect 2 small letter word only
a.match("^[a-z]{2}$")
["hi", index: 0, input: "hi", groups: undefined]   //here pattern matched..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var a = "Hi"
a.match("^[a-z]{2}$")
null

// exact 2 letter..either small letter or uppercase letter it matches..
var a = "Hi"
a.match("^[A-Za-z]{2}$")
null

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// letter between 2 to 5..it expects a letter minimum 2 and maximum 5..
var a = "Hi"
a.match("^[A-Za-z]{2,5}$")

// any number of letter ..either capital or small letter or any length it will work..
var a = "Hi"
a.match("^[A-Za-z]+$")

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

var a = "Hi"
a.match("^[K-Za-z]+$")
null

var a = "Kiiiiiiiiii"
a.match("^[H-Za-z]+$")
["Kiiiiiiiiii", index: 0, input: "Kiiiiiiiiii", groups: undefined]

var a = "Kiiiiiiiiii"
a.match("^[H-Za-z$@&]+$")  //any special character it will work..

+ mean any length..
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

///phone number.. 
var a = 8782656782
a.match("^[0-9]{10}$")   //this will not work..
a.match is not a function

/// regex is only work on strings

//if you want to work this..
var a = 8782656782
a.toString().match("^[0-9]{10}$")
["8782656782", index: 0, input: "8782656782", groups: undefined]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
dot . --> means anything/everything in terms of regex.. escape character

var test = "hob hom tom hnm"
var pattern = /h.m/g   //I want all the word that start with h and with m..in between any word does not matter..
test.match(/h.m/g)   --> /g  == means global
["hom", "hnm"]     //output

test.match(/h.m/g)
(2) ["hom", "hnm"]

test.match(/h./g)    //gives all those words starts with h and in between anything
(3) ["ho", "ho", "hn"]

test.match(/.m/g)     //give all those words end with m..
(3) ["om", "om", "nm"]

var test = "h.b hom tom h.m"   //if you looking word that have a dot (.) characters in between..
test.match(/h\.m/g)     //you have to escape for dot..
["h.m"]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var email = "a@a.com" 
email.match("^([a-zA-Z0-9]+)@([a-zA-Z0-9]+)\.([a-zA-Z]{2,5})$")   
["a@a.com", "a", "a", "com", index: 0, input: "a@a.com", groups: undefined]

var email = "@a.com"
email.match("^([a-zA-Z0-9]+)@([a-zA-Z0-9]+)\.([a-zA-Z]{2,5})$")  //this will not work..
null

var email = "aa.com"
email.match("^([a-zA-Z0-9]+)@([a-zA-Z0-9]+)\.([a-zA-Z]{2,5})$")   //this will not work..
null

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### closure:
-------------
closure means  scoping -- close means enclosing something.. its going to enclose something for us..
its more about scoping..

1. local scope
2. global scope

//enclose something

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>1   

var a = 10;
function add(){
    var b = 20;
    return a+b
}

console.log("a>>>>",a)  //a we can print..

console.log("b>>>>",b)   //it prints undefined..variable b act like a closure.. scope of variable b is just inside curly bracket inside function.. here we cannot use variable b outside..

console.log("sum>>>>",add())

curly bracket makes a closure for us..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>2

var a = 10;
for(i=0; i<5; i++) {   //function by default makes a closure..
    let b = 20;
    console.log(a+b+i)
}

console.log("a>>>>",a)  //a and b both got printed.. which is not correct..problem here is the var keyword..
console.log("b>>>>",b)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>3

let a = 10;   //global scope
function add() {
    a = 30;  //a will override here..   //local scope
    var b = 20;   //b cannot access outside..
    return a+b
}

console.log("a>>>>",a)  //10

console.log("sum>>>>",add())   //30  //right now it is in the global scope.. it is defined outside the function..its overriding.

console.log("a>>>>",a)   //10

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
4>

var employeeId = 'abc123';
function foo() {
	employeeId = '123bcd';  //here it will override..
	return;
}

foo();  //call this function..
console.log(employeeId);

Answer: 2) '123bcd'  //because it will get override..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
5>  Intv Qn

var employeeId = 'abc123';
function foo() {
    employeeId = '123bcd';  //here overriding
	return;

	function abc() {}  //after retun again called one function
}

foo();
console.log(employeeId);

Answer: 3) '"123bcd"'

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

6>  Intv Qn

var employeeId = 'abc123';
function foo() {
    employeeId = '123bcd';  //here overriding
	
	function abc() {}; //even if your function is inside that value will get override.
	return;  
}

foo();
console.log(employeeId);

Answer: 3) '"123bcd"'

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
7>

var employeeId = 'abc123';
function foo() {
	employeeId();
	return;

	function employeeId() {
		console.log(typeof employeeId);  //it printed type of employeeId as function.
	}
}

foo();
Answer: 2) 'function'  

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
7>  same above function..

var employeeId = 'abc123';  
function foo() {
	employeeId = 'bcd123';
	return;

	function employeeId() {
		console.log(typeof employeeId);  //it printed type of employeeId as function.
	}
}

//when you define something global you can override local but you should not have same name of function inside it..

foo();
undefined
employeeId
Answer: 2) 'abc123'   //here value does not get overrided..because variable name and function name is same it will not override..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

7>
var employeeId = 'abc123';
function foo() {
    abc();
    return;
	function abc() {
		console.log(typeof employeeId);
	}
}

"string"  //returns string because its accessing from the global scope...

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
8>

var employeeId = 'abc123';
function foo() {
    employeeId = 10   //if its not find in the local scope it will go in the global scope.. global scope also will give undefined..
	
    abc();  //calling the function..
    return;
	//defining the function..
	function abc() {
		console.log(typeof employeeId);
	}
}

number   //returns number...

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

function multiply(a,b,c) {
    return a*b*c
}

multiply(2,3,4)
24

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//Lets say if you have to pass the parameter individually one after the other..this is called curring function..function inside function..function return the function is called curring function..

function multiply(a) {

    return function(b) {
        return function(c) {
            return a*b*c
        }
    }
}

multiply(2)(3)(4)  
24

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### hoisting:
----------------
a = 10;
var b = 20;
console.log(add(a,b))   //what error will come here ? 

function add(a,b) {
    return a+b
}

var a;
30;   //ouput is 30..   function is called even before declaraing it..we dont get any error..

JavaScript will read the code in the form of first it declarae all variables and then it start assigning..JS will compile the code in this way..

//////////////

var a;
var b;

function add(a,b){
    return a+b
}

a =10;
b=20;
console.log(add(a,b))

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
## Objects:
------------
var movies = "Avengers"
var movieRating = 4.5
var movieLang = "English"

var movies2 = "Jab We Met",
var movieRating2 = 4.8
var movieLang2 = "Hindi"

//to manager the particular set of data we go with Objects..
//objects are defined with curly brackets { }
//Arrays are defined with square brackets [ ]
//you can access the property with dot notation.

var movie = {
    name:'Avengers',
    rating:4.5,
    lang:'English'
}
typeof(movie)
"object"

//accessing the property
movie.name
"Avengers"

movie.rating
4.5

movie.lang
"English"

//we can update the property
movie.rating = 4.8
4.8

movie
{name: "Avengers", rating: 4.8, lang: "English"}

//we can add the propertry..
movie.industry = "Hollywood"
"Hollywood"

movie
{name: "Avengers", rating: 4.8, lang: "English", industry: "Hollywood"}

//we can delete the property..
delete movie.lang
true

movie
{name: "Avengers", rating: 4.8, industry: "Hollywood"}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// In the seal() You can only update the property..It sealed the object..you cannot add the property..
Object.seal(movie)
{name: "Avengers", rating: 4.8, industry: "Hollywood"} industry: "Hollywood"name: "Avengers" rating: 4.8__proto__: Object

movie.lang = "English"
"English"

//it is not added the new property..
movie
{name: "Avengers", rating: 4.8, industry: "Hollywood"}

//you can update the property..it is possible.
movie.rating = 4.9
4.9

movie
{name: "Avengers", rating: 4.9, industry: "Hollywood"}

delete movie.name
false

//Neither you can delete/add the propert..but You can only update the property..

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//with freeze() you can stop the update part also ..

//You can only update/add/remove the property.. 
Object.freeze(movie)
{name: "Avengers", rating: 4.9, industry: "Hollywood"}

movie.rating = 4.9
4.9

movie.rating = 3
3

movie
{name: "Avengers", rating: 4.9, industry: "Hollywood"}

delete movie.name
false

//add 
movie.lang = "English"
"English"

movie
{name: "Avengers", rating: 4.9, industry: "Hollywood"}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//literal notation -> [ ] .. you can add/update/remove the property.. 
var movie = {
    name:'Avengers',
    rating:4.5,
    lang:'English'
}
undefined

//you can access the property..
movie['name']
"Avengers"

movie['rating']
4.5

//update the property
movie['rating']=4.8
4.8

//add the property
movie['ind']="Hollywood"
"Hollywood"

movie
{name: "Avengers", rating: 4.8, lang: "English", ind: "Hollywood"}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
////JSON/////   multiple movies object you can add here using JSON..
//JavaScript Object Notation//

//This is the way to represent the data..this is unstructured form of data..
var movies = [  //array.. array of objects refer as JSON.
    {   //object1
        name:'Avengers',
        rating:4.5,
        lang:'English'
    },
    {   //object2
        name:'Jab We Met',
        rating:4.8,
        lang:'Hindi'
    },
    {   //object3
        name:'Mad MAx',
        rating:3.8,
        lang:'English',
        ind:'Hollywood'
    }
]

movies[0]
{name: "Avengers", rating: 4.5, lang: "English"}

movies[0].lang
"English"

//give only the name of the movie..
movies.map( (data) => {return data.name} )
["Avengers", "Jab We Met", "Mad MAx"]

//using for loop..
for(mymovies of movies) {
    console.log(mymovies.name)
}

Avengers
Jab We Met
Mad MAx

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//// using "for in" loop..  helps in Iterating over the object..
//This is the object..
var movie = {
    name:'Avengers',
    rating:4.5,
    lang:'English'
}

//I want to bring the keys of the object..
for(key in movie){
    console.log(key)
}

name
rating
lang

for(abc in movie){
    console.log(abc)
}

name
rating
lang

//If you want values of key
for(key in movie){
    console.log(movie[key])
}

Avengers
4.5
English

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//One array can have another array..Object key can have array also..
var movie = {
    name:'Avengers',
    rating:4.5,
    lang:'English',
    starcast: {
        male:['a','b','c'],
        female:['x','y','z']
    }
}

movie.starcast
{male: Array(3), female: Array(3)}

movie.starcast.male
(3) ["a", "b", "c"]

movie.starcast.male[0]
"a"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
###Object Methods:   reusability
-------------------
//when function assign to variable it becomes method
var calc = {
    sum: function(a,b) {return a+b},
    sub: (a,b) => {return a-b},   //this is arrow function..
}

calc.sum(30,20)
50

calc.sub(30,20)
10

//It contains 2 operations..
var dbQuery = {
    find: (table) => {return `Select * from ${table}`},
    insert: (table, data) => {return `insert into ${table} name, city values(${data.name}, ${data.city})`}
}

dbQuery.find('students')
"Select * from students"  //output

dbQuery.insert('employee',{name:'John',city:'Delhi'} )
"insert into employee name, city values(John,Delhi)"  //output


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



